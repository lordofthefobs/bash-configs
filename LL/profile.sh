export DISABLE_LL_PROMPT='true'

export VAULT_ADDR=https://vault.tools.llabs.io

# Do not edit this file unless you never expect to re-download this
# file or re-run the mac provisioning script as it will get overwritten.
# Add your own customizations to .bash_profile, .bashrc, or elsewhere.

# git workspace. If you want to change this you can add a 
# GIT_WORKSPACE=foo to your .bash_profile
if [ -z "$GIT_WORKSPACE" ]; then
    GIT_WORKSPACE=~/git
fi

BREW_PREFIX=$(brew --prefix)

# Homebrew binaries should take precedence over other things in our PATH
PATH=/opt/alternatives/bin:$BREW_PREFIX/bin:$PATH

# Homebrew cask installs should get linked in /Applications instead of ~/Applications
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

### Java on the Mac ###
export JAVA_VERSION=1.6
if /usr/libexec/java_home -v$JAVA_VERSION &> /dev/null; then
    export JAVA_HOME=`/usr/libexec/java_home -v$JAVA_VERSION`
    # Groovy on the mac defaults to MacRoman encoding
    export JAVA_OPTS=-Dfile.encoding=UTF-8
fi
# for old style builds, pretend to be a 10.04 box so we can find dependencies
# in /ext/build. It doesn't matter for java builds anyway.
export WAVE_PLATFORM_VERSION=10.04-64
export WAVE_PLATFORM=ubuntu-10.04-64
export WAVE_PLATFORM_TYPE="ubuntu"

### gradle
export GRADLE_COMMON=$GIT_WORKSPACE/build_tools/gradle_common
# daemon on!
export GRADLE_OPTS="-Dorg.gradle.daemon=true"

### ant
ANT_BIN=$(which ant)
ANT_BIN_FULLPATH=$($BREW_PREFIX/bin/greadlink -f ${ANT_BIN})
export ANT_HOME=$(dirname $(dirname ${ANT_BIN_FULLPATH}))

# increase soft limit
# avoids "EMFILE, too many open files" error
ulimit -n 2048

# have less handle color
export LESS=-RS

# needed to compile our python libraries in Mavericks/10.9
export ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future

# have bash ignore certain file endings during name completion
export FIGNORE=\~:CVS:.svn

function _bash_completion() {
    if [ -f $BPREFIX/etc/bash_completion ]; then
        . $BPREFIX/etc/bash_completion
    fi
}
_bash_completion

# http://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
shopt -s checkwinsize
shopt -s cdspell
shopt -s cmdhist
shopt -s dirspell
shopt -s histappend
shopt -s globstar
shopt -s no_empty_cmd_completion

# man bash
unset HISTFILESIZE
export HISTSIZE=1000000
export HISTIGNORE="&:[bf]g:exit:ls:cd:cd ..:cd -"
# don't put duplicate lines in the history.
export HISTCONTROL=ignoredups:ignorespace
export HISTTIMEFORMAT='%F %T '

# https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File-Syntax.html
bind 'set match-hidden-files off'
bind 'set completion-ignore-case on'
bind 'set completion-map-case on'
bind 'set mark-modified-lines on'
bind 'set show-all-if-ambiguous on'

# gc is a helper function to quickly clone from git.ll.com
# it will first check git and if it doesn't find a matching repo
# it will fallback to svn
function gc() {
    if [ -z $1 ]; then
        echo "Usage: $FUNCNAME <repository> [branch]"
        return
    fi

    local repo=$1

    local branch=""
    if [ ! -z $2 ]; then
        branch="-b $2"
    fi

    git clone $branch git@git.locationlabs.com:$repo --recursive

    if [ $? -ne 0 ]; then
        echo ""
        echo "Not in git. Trying svn."
        branch="trunk"
        if [ ! -z $2 ]; then
            branch="branches/$2"
        fi
        svn co svn+ssh://svn/wm/project/$repo/$branch $repo
    fi
}

# quickly get the latest shared ssh config and merge it!
function sshconfmerge() {
    local tmp=$(mktemp -d /tmp/svn.XXXX)
    pushd $tmp > /dev/null
    echo "Retrieving latest sshconfmerge"
    svn export svn://svn/wm/sys/ssh
    cd ssh
    echo "Running sshconfmerge"
    if [ ! -e ~/.ssh/config ]; then
        # first time running sshconfmerge with no config
        # touch the config and run with -f
        echo "No ssh config found. Initializing."
        touch ~/.ssh/config
        ./sshconfmerge -f
    else
        ./sshconfmerge
    fi
    echo "Done"
    _bash_completion
    popd > /dev/null
    rm -rf $tmp
}

256_color () {
    # http://en.wikipedia.org/wiki/File:Xterm_color_chart.png
    echo -ne "\[\033[38;5;$1m\]";
}

# cool, colorful, git-aware prompt
# disable by setting DISABLE_LL_PROMPT=true before loading this file
if [ -z "$DISABLE_LL_PROMPT" ]; then
    case "$TERM" in
    xterm*|rxvt*|screen*|linux*)
        update_prompt() {
            local NOCOLOR='\[\033[0m\]'
            local GREEN='\[\033[32m\]'
            local RED='\[\033[31m\]'
            local BOLD_RED='\[\033[01;31m\]'
            local WHITE_ON_RED='\[\033[01;41m\]'
            local BLUE='\[\033[01;34m\]'
            local CYAN='\[\033[37m\]'
            local PURPLE='\[\033[01;35m\]'
            local YELLOW='\[\033[33m\]'
            local WHITE_ON_GREY='\[\033[01;40m\]'
            local GREY_ON_GREY='\[\033[40m\]'

            local ORANGE=$(256_color 215)
            local INDIGO=$(256_color 164)
            local ROOTPREFIX=''
            if [ "$(whoami)" == "root" ]; then
                ROOTPREFIX="${WHITE_ON_RED}\u${NOCOLOR}@"
            fi

            local VE=''
            if [ $VIRTUAL_ENV ]; then
                VE="${INDIGO}<$(basename $VIRTUAL_ENV)>${NOCOLOR} "
            fi

            local GIT_PS1=''
            if [ $(type -t __git_ps1) ]; then
                local GIT_PS1="${ORANGE}$(__git_ps1 " %s")${NOCOLOR}"
            fi

            PS1="${VE}${ROOTPREFIX}${RED}\h${NOCOLOR}:${BLUE}\w${NOCOLOR}${GIT_PS1}\$ "
        }
    
        # __git_ps1 options
        export GIT_PS1_SHOWDIRTYSTATE=true
        export GIT_PS1_SHOWUNTRACKEDFILES=true
        export GIT_PS1_SHOWSTASHSTATE=true
        export GIT_PS1_SHOWUPSTREAM="git, verbose"

        PROMPT_COMMAND="update_prompt; $PROMPT_COMMAND"
        ;;
    *)
        ;;
    esac
fi

function setup_kubectl_contexts() {
    kubectl config set-context afp-test --cluster=att.kube.dev.llabs.io --namespace=afp-test --user=sang.park@avast.com
    kubectl config set-context afp-stage --cluster=att.kube.dev.llabs.io --namespace=afp-stage --user=sang.park@avast.com
    kubectl config set-context afp-lab --cluster=att.kube.llabs.io --namespace=afp-lab --user=sang.park@avast.com
    kubectl config set-context afp-prod --cluster=att.kube.llabs.io --namespace=afp-prod --user=sang.park@avast.com

    kubectl config set-context ring-dev --cluster=ott.kube.dev.llabs.io --namespace=ring-dev --user=sang.park@avast.com
    kubectl config set-context ring-lab --cluster=ott.kube.llabs.io --namespace=ring-lab --user=sang.park@avast.com
    kubectl config set-context ring-prod --cluster=ott.kube.llabs.io --namespace=ring-prod --user=sang.park@avast.com

    kubectl config set-context tmo-dev --cluster=ott.kube.dev.llabs.io --namespace=tmo-dev --user=sang.park@avast.com
    kubectl config set-context tmo-prod --cluster=ott.kube.llabs.io --namespace=tmo-prod --user=sang.park@avast.com

    kubectl config set-context vcf-test --cluster=vzw.kube.dev.llabs.io --namespace=vcf-test --user=sang.park@avast.com
    kubectl config set-context vcf-stage --cluster=vzw.kube.dev.llabs.io --namespace=vcf-stage --user=sang.park@avast.com
    kubectl config set-context vcf-ext-stable --cluster=k8s.vzw.llabs.io --namespace=vcf-ext-stable --user=sang.park@avast.com
    kubectl config set-context vcf-prod --cluster=k8s.vzw.llabs.io --namespace=vcf-prod --user=sang.park@avast.com

    kubectl config set-context voda-test --cluster=voda.kube.dev.llabs.io --namespace=voda-test --user=sang.park@avast.com
    kubectl config set-context voda-stage --cluster=voda.kube.llabs.io --namespace=voda-stage --user=sang.park@avast.com
    kubectl config set-context voda-prod --cluster=voda.kube.llabs.io --namespace=voda-prod --user=sang.park@avast.com

    kubectl config set-context wind3-test --cluster=wind3.kube.dev.llabs.io --namespace=wind3-test --user=sang.park@avast.com
    kubectl config set-context wind3-stage --cluster=wind3.kube.llabs.io --namespace=wind3-stage --user=sang.park@avast.com
    kubectl config set-context wind3-prod --cluster=wind3.kube.llabs.io --namespace=wind3-prod --user=sang.park@avast.com

    kubectl config set-context kyivstar-test --cluster=kyivstar.kube.dev.llabs.io --namespace=kyivstar-test --user=sang.park@avast.com
    kubectl config set-context kyivstar-stage --cluster=kyivstar.kube.llabs.io --namespace=kyivstar-stage --user=sang.park@avast.com
    kubectl config set-context kyivstar-prod --cluster=kyivstar.kube.llabs.io --namespace=kyivstar-prod --user=sang.park@avast.com
}
